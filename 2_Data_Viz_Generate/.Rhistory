assignees.links[[5]] = 0
assignees.links[[25]] = 0
al.df <- data.frame(ID = rep(seq(assignees.links), sapply(assignees.links, length)), Obs = unlist(assignees.links))
al.df
assignees.links <- sapply(1:nrow(count.ass_org.srtd), function(x) grep(nodes[x], count.ass_org.srtd[,1], ignore.case = TRUE))
assignees.links[[1]] = 0
assignees.links[[2]] = 0
assignees.links[[3]] = 0
assignees.links[[4]] = 0
assignees.links[[5]] = 0
assignees.links[[25]] = 0
al.df <- data.frame(ID = rep(seq(assignees.links), sapply(assignees.links, length)), Obs = unlist(assignees.links))
al.df
assignees.links
source_lst <- lapply(source, function(x) match(x,nodes))
al.df[,1]
al.df[,1] -1
assignees.links <- sapply(1:nrow(count.ass_org.srtd), function(x) grep(nodes[x], count.ass_org.srtd[,1], ignore.case = TRUE))
al.df <- data.frame(ID = rep(seq(assignees.links), sapply(assignees.links, length)), Obs = unlist(assignees.links))
al.df[,1]
count.ass_org.srtd$target_imputed <- al.df[order(al.df$Obs), 1]
fl.df
# impute assignee node ids onto original counts
assignees.links <-
sapply(1:nrow(count.ass_org.srtd), function(x) {
retv = grep(nodes[x], count.ass_org.srtd[, 1], ignore.case = TRUE)
if (length(retv) < 1 || is.na(retv)) {
return (0)
}
else
return (retv)
})
assignees.links
al.df <- data.frame(ID = rep(seq(assignees.links), sapply(assignees.links, length)), Obs = unlist(assignees.links))
al.df
al.df[,1] + length(top.funders) - 1
count.ass_org.srtd$target_imputed <- al.df[order(al.df$Obs), 1]
p.sk <- plot_ly(
type = "sankey",
orientation = "h",
node = list(
label = nodes,
# color = json_data$data[[1]]$node$color,
pad = 15,
thickness = 15,
line = list(
color = "black",
width = 0.5
)
),
link = list(
source = count.ass_org.srtd$source_imputed,
target = count.ass_org.srtd$target_imputed,
value =  count.ass_org.srtd$freq
# color =  json_data$data[[1]]$link$color,
# label =  json_data$data[[1]]$link$label
)
) %>%
layout(
title = "Top Government Interest Organizations to Assignees, 1980 - 2017",
font = list(
size = 10
),
xaxis = list(showgrid = F, zeroline = F, showticklabels = F),
yaxis = list(showgrid = F, zeroline = F, showticklabels = F)
)
p.sk
p.sk <- plot_ly(
type = "sankey",
orientation = "h",
node = list(
label = nodes,
# color = json_data$data[[1]]$node$color,
pad = 15,
thickness = 15,
line = list(
color = "black",
width = 0.5
)
),
link = list(
source = count.ass_org.srtd$source,
target = count.ass_org.srtd$target_imputed,
value =  count.ass_org.srtd$freq
# color =  json_data$data[[1]]$link$color,
# label =  json_data$data[[1]]$link$label
)
) %>%
layout(
title = "Top Government Interest Organizations to Assignees, 1980 - 2017",
font = list(
size = 10
),
xaxis = list(showgrid = F, zeroline = F, showticklabels = F),
yaxis = list(showgrid = F, zeroline = F, showticklabels = F)
)
p.sk
install.packages("googleVis v0.6.0")
install.packages("googleVis")
library(googleVis)
colnames(count.ass_org.srtd)
gvisSankey(count.ass_org.srtd, from = "level_one", to = "entity", weight = "freq" )
sankey <- gvisSankey(count.ass_org.srtd, from = "level_one", to = "entity", weight = "freq" )
View(sankey)
sankey$html
sankey$html$chart
plot(sankey)
sankey <- gvisSankey(count.ass_org.srtd, from = "level_one", to = "entity", weight = "freq" )
plot(sankey)
sankey2 <- gvisSankey(count.ass_org.srtd, from = "entity", to = "level_one",  weight = "freq" )
plot(sankey2)
sankey1 <- gvisSankey(count.ass_org.srtd, from = "level_one", to = "entity", weight = "freq" )
sankey2 <- gvisSankey(count.ass_org.srtd, from = "entity", to = "level_one",  weight = "freq" )
plot(sankey1)
count.ass_org.srtd$target
count.ass_org.srtd$target - 1
count.ass_org.srtd$target_imputed <- count.ass_org.srtd$target - 1
count.ass_org.srtd$target
count.ass_org.srtd$target_imputed
p.sk <- plot_ly(
type = "sankey",
orientation = "h",
node = list(
label = nodes,
# color = json_data$data[[1]]$node$color,
pad = 15,
thickness = 15,
line = list(
color = "black",
width = 0.5
)
),
link = list(
source = count.ass_org.srtd$source,
target = count.ass_org.srtd$target_imputed,
value =  count.ass_org.srtd$freq
# color =  json_data$data[[1]]$link$color,
# label =  json_data$data[[1]]$link$label
)
) %>%
layout(
title = "Top Government Interest Organizations to Assignees, 1980 - 2017",
font = list(
size = 10
),
xaxis = list(showgrid = F, zeroline = F, showticklabels = F),
yaxis = list(showgrid = F, zeroline = F, showticklabels = F)
)
p.sk
count.ass_org.srtd %>% select(level_one == "Department of Health and Human Services")
p.sk <- plot_ly(
type = "sankey",
orientation = "h",
node = list(
label = nodes,
# color = json_data$data[[1]]$node$color,
pad = 15,
thickness = 15,
line = list(
color = "black",
width = 0.5
)
),
link = list(
source = count.ass_org.srtd$source,
target = count.ass_org.srtd$target_imputed,
value =  count.ass_org.srtd$freq
# color =  json_data$data[[1]]$link$color,
# label =  json_data$data[[1]]$link$label
)
) %>%
layout(
title = "Top Government Interest Organizations to Assignees, 1980 - 2017",
font = list(
size = 10
),
xaxis = list(showgrid = F, zeroline = F, showticklabels = F),
yaxis = list(showgrid = F, zeroline = F, showticklabels = F)
)
p.sk
nodes
unique(count.ass_org.srtd[1:top.rows,2])
top.rows <- nrow(count.ass_org.srtd)
top.rows
count.ass_org.srtd <- ass_org.merged.ratio %>%
group_by(entity, level_one) %>%
summarise(freq = sum(weight)) %>%
arrange(desc(freq))
top.rows <- 30
count.ass_org.srtd <- count.ass_org.srtd[1:top.rows,]
count.ass_org.srtd <- count.ass_org.srtd[!grepl("The United States of America as Represented by the United States Department of Energy", count.ass_org.srtd$entity), ]
count.ass_org.srtd <- count.ass_org.srtd[!grepl("The United States of America as Represented by the Administrator of the National Aeronautics and Space Administration", count.ass_org.srtd$entity), ]
count.ass_org.srtd <- count.ass_org.srtd[!grepl("The United States of America as Represented by the Secretary of the Navy", count.ass_org.srtd$entity), ]
ass_org.merged.ratio <- assignees.merged.sub %>%
distinct() %>%
group_by(patent_id) %>%
mutate(weight = 1/n())
count.ass_org.srtd <- ass_org.merged.ratio %>%
group_by(entity, level_one) %>%
summarise(freq = sum(weight)) %>%
arrange(desc(freq))
top.rows <- 30
top.rows <- nrow(count.ass_org.srtd)
top.funders <- unique(count.ass_org.srtd[1:top.rows,2])
top.funders <- unique(count.ass_org.srtd[1:top.rows,2])
top.funders
count.ass_org.srtd <- count.ass_org.srtd[1:top.rows,]
count.ass_org.srtd <- count.ass_org.srtd[!grepl("The United States of America as Represented by the United States Department of Energy", count.ass_org.srtd$entity), ]
count.ass_org.srtd <- count.ass_org.srtd[!grepl("The United States of America as Represented by the Administrator of the National Aeronautics and Space Administration", count.ass_org.srtd$entity), ]
count.ass_org.srtd <- count.ass_org.srtd[!grepl("The United States of America as Represented by the Secretary of the Navy", count.ass_org.srtd$entity), ]
assignees.merged.sub <- assignees.merged[,c(1, 3, 20)] # patent_id, entity, level_one
ass_org.merged.ratio <- assignees.merged.sub %>%
distinct() %>%
group_by(patent_id) %>%
mutate(weight = 1/n())
count.ass_org.srtd <- ass_org.merged.ratio %>%
group_by(entity, level_one) %>%
summarise(freq = sum(weight)) %>%
arrange(desc(freq))
top.rows <- 30
count.ass_org.srtd <- count.ass_org.srtd[1:top.rows,]
count.ass_org.srtd <- count.ass_org.srtd[!grepl("The United States of America as Represented by the United States Department of Energy", count.ass_org.srtd$entity), ]
count.ass_org.srtd <- count.ass_org.srtd[!grepl("The United States of America as Represented by the Administrator of the National Aeronautics and Space Administration", count.ass_org.srtd$entity), ]
c
count.ass_org.srtd <- count.ass_org.srtd[!grepl("The United States of America as Represented by the Secretary of the Navy", count.ass_org.srtd$entity), ]
top.rows <- nrow(count.ass_org.srtd)
top.rows
top.funders <- unique(count.ass_org.srtd[1:top.rows,2])
top.funders
top.assignees <- unique(count.ass_org.srtd[1:top.rows,1])
top.assignees
c(top.funders, top.assignees)
unlist(c(top.funders, top.assignees))
nodes = unlist(c(top.funders, top.assignees))
nodes
sankey1 <- gvisSankey(count.ass_org.srtd, from = "level_one", to = "entity", weight = "freq" )
plot(sankey1)
sankey1$type
sankey1$chartid
sankey1$html
sankey1$html$header
sankey1$html$footer
View(sankey1)
sankey2 <- gvisSankey(count.ass_org.srtd, from = "entity", to = "level_one",  weight = "freq" )
plot(sankey2)
nodes
source <- list(count.ass_org.srtd$level_one)
source_lst <- lapply(source, function(x) match(x,nodes))
count.ass_org.srtd$source <- unlist(source_lst)
count.ass_org.srtd
target <- list(count.ass_org.srtd$entity)
target_lst <- lapply(target, function(x) match(x,nodes))
count.ass_org.srtd$target <- unlist(target_lst)
p.sk <- plot_ly(
type = "sankey",
orientation = "h",
node = list(
label = nodes,
# color = json_data$data[[1]]$node$color,
pad = 15,
thickness = 15,
line = list(
color = "black",
width = 0.5
)
),
link = list(
source = count.ass_org.srtd$source,
target = count.ass_org.srtd$target,
value =  count.ass_org.srtd$freq
# color =  json_data$data[[1]]$link$color,
# label =  json_data$data[[1]]$link$label
)
) %>%
layout(
title = "Top Government Interest Organizations to Assignees, 1980 - 2017",
font = list(
size = 10
),
xaxis = list(showgrid = F, zeroline = F, showticklabels = F),
yaxis = list(showgrid = F, zeroline = F, showticklabels = F)
)
p.sk
ndes
nodes
count.ass_org.srtd$source <- count.ass_org.srtd$source - 1
count.ass_org.srtd$target <- count.ass_org.srtd$target - 1
p.sk <- plot_ly(
type = "sankey",
orientation = "h",
node = list(
label = nodes,
# color = json_data$data[[1]]$node$color,
pad = 15,
thickness = 15,
line = list(
color = "black",
width = 0.5
)
),
link = list(
source = count.ass_org.srtd$source,
target = count.ass_org.srtd$target,
value =  count.ass_org.srtd$freq
# color =  json_data$data[[1]]$link$color,
# label =  json_data$data[[1]]$link$label
)
) %>%
layout(
title = "Top Government Interest Organizations to Assignees, 1980 - 2017",
font = list(
size = 10
),
xaxis = list(showgrid = F, zeroline = F, showticklabels = F),
yaxis = list(showgrid = F, zeroline = F, showticklabels = F)
)
p.sk
assignees.merged <- assignees.clnd %>%  inner_join(in.patent_level.merged, by="patent_id")
assignees.merged$entity <- toTitleCase(tolower(assignees.merged$entity))
# sankey viz for funders --> assignees to do the network viz
assignees.merged.sub <- assignees.merged[,c(1, 3, 20)] # patent_id, entity, level_one
ass_org.merged.ratio <- assignees.merged.sub %>%
distinct() %>%
group_by(patent_id) %>%
mutate(weight = 1/n())
count.ass_org.srtd <- ass_org.merged.ratio %>%
group_by(entity, level_one) %>%
summarise(freq = sum(weight)) %>%
arrange(desc(freq))
top.rows <- 30
count.ass_org.srtd <- count.ass_org.srtd[1:top.rows,]
count.ass_org.srtd <- count.ass_org.srtd[!grepl("The United States of America as Represented by the United States Department of Energy", count.ass_org.srtd$entity), ]
count.ass_org.srtd <- count.ass_org.srtd[!grepl("The United States of America as Represented by the Administrator of the National Aeronautics and Space Administration", count.ass_org.srtd$entity), ]
count.ass_org.srtd <- count.ass_org.srtd[!grepl("The United States of America as Represented by the Secretary of the Navy", count.ass_org.srtd$entity), ]
# create nodes
top.rows <- nrow(count.ass_org.srtd)
top.funders <- unique(count.ass_org.srtd[1:top.rows,2])
top.assignees <- unique(count.ass_org.srtd[1:top.rows,1])
nodes = unlist(c(top.funders, top.assignees))
nodes
source <- list(count.ass_org.srtd$level_one)
source_lst <- lapply(source, function(x) match(x,nodes))
count.ass_org.srtd$source <- unlist(source_lst)
# create target
target <- list(count.ass_org.srtd$entity)
target_lst <- lapply(target, function(x) match(x,nodes))
count.ass_org.srtd$target <- unlist(target_lst)
count.ass_org.srtd$source <- count.ass_org.srtd$source - 1
count.ass_org.srtd$target <- count.ass_org.srtd$target - 1
patent_flow_plot <- plot_ly(
type = "sankey",
orientation = "h",
node = list(
label = nodes,
# color = json_data$data[[1]]$node$color,
pad = 15,
thickness = 15,
line = list(
color = "black",
width = 0.5
)
),
link = list(
source = count.ass_org.srtd$source,
target = count.ass_org.srtd$target,
value =  count.ass_org.srtd$freq
# color =  json_data$data[[1]]$link$color,
# label =  json_data$data[[1]]$link$label
)
) %>%
layout(
title = "Top Government Interest Organizations to Assignees, 1980 - 2017",
font = list(
size = 10
),
xaxis = list(showgrid = F, zeroline = F, showticklabels = F),
yaxis = list(showgrid = F, zeroline = F, showticklabels = F)
)
patent_flow_plot
patent_flow_plot
count.ass_org.srtd <- ass_org.merged.ratio %>%
group_by(entity, level_one) %>%
summarise(freq = sum(weight)) %>%
arrange(desc(freq))
View(count.ass_org.srtd)
count.ass_org.srtd <- ass_org.merged.ratio %>%
group_by(entity, level_one) %>%
summarise(freq = sum(weight)) %>%
arrange(desc(freq))
top.rows <- 30
count.ass_org.srtd <- count.ass_org.srtd[1:top.rows,]
count.ass_org.srtd <- count.ass_org.srtd[!grepl("The United States of America as Represented by the United States Department of Energy", count.ass_org.srtd$entity), ]
count.ass_org.srtd <- count.ass_org.srtd[!grepl("The United States of America as Represented by the Administrator of the National Aeronautics and Space Administration", count.ass_org.srtd$entity), ]
count.ass_org.srtd <- count.ass_org.srtd[!grepl("The United States of America as Represented by the Secretary of the Navy", count.ass_org.srtd$entity), ]
count.ass_org.srtd <- ass_org.merged.ratio %>%
group_by(entity, level_one) %>%
summarise(freq = sum(weight)) %>% filter(entity %in% c("The Regents of the University of Michigan", "The Scripps Research Institute"), level_one == "Department of Health and Human Services")
arrange(desc(freq))
count.ass_org.srtd <- ass_org.merged.ratio %>%
group_by(entity, level_one) %>%
summarise(freq = sum(weight)) %>% filter(entity %in% c("The Regents of the University of Michigan", "The Scripps Research Institute"), level_one == "Department of Health and Human Services")
assignees.clnd <- in.assignees[,c(1,2,8)]
#calculate the weight for each patent_id
assignees.clnd <- assignees.clnd %>%
group_by(patent_id) %>%
mutate(weight = 1/n())
assignees.merged <- assignees.clnd %>%  inner_join(in.patent_level.merged, by="patent_id")
assignees.merged$entity <- toTitleCase(tolower(assignees.merged$entity))
# sankey viz for funders --> assignees to do the network viz
assignees.merged.sub <- assignees.merged[,c(1, 3, 20)] # patent_id, entity, level_one
ass_org.merged.ratio <- assignees.merged.sub %>%
distinct() %>%
group_by(patent_id) %>%
mutate(weight = 1/n())
count.ass_org.srtd <- ass_org.merged.ratio %>%
group_by(entity, level_one) %>%
summarise(freq = sum(weight)) %>%
arrange(desc(freq))
top.rows <- 30
count.ass_org.srtd <- count.ass_org.srtd[1:top.rows,]
count.ass_org.srtd <- count.ass_org.srtd[!grepl("The United States of America as Represented by the United States Department of Energy", count.ass_org.srtd$entity), ]
count.ass_org.srtd <- count.ass_org.srtd[!grepl("The United States of America as Represented by the Administrator of the National Aeronautics and Space Administration", count.ass_org.srtd$entity), ]
count.ass_org.srtd <- count.ass_org.srtd[!grepl("The United States of America as Represented by the Secretary of the Navy", count.ass_org.srtd$entity), ]
# create nodes
top.rows <- nrow(count.ass_org.srtd)
top.funders <- unique(count.ass_org.srtd[1:top.rows,2])
top.assignees <- unique(count.ass_org.srtd[1:top.rows,1])
nodes = unlist(c(top.funders, top.assignees))
# create source
source <- list(count.ass_org.srtd$level_one)
source_lst <- lapply(source, function(x) match(x,nodes))
count.ass_org.srtd$source <- unlist(source_lst)
# create target
target <- list(count.ass_org.srtd$entity)
target_lst <- lapply(target, function(x) match(x,nodes))
count.ass_org.srtd$target <- unlist(target_lst)
# offset by 1 - so continous list of nodes starts at 0
count.ass_org.srtd$source <- count.ass_org.srtd$source - 1
count.ass_org.srtd$target <- count.ass_org.srtd$target - 1
patent_flow_plot <- plot_ly(
type = "sankey",
orientation = "h",
node = list(
label = nodes,
# color = json_data$data[[1]]$node$color,
pad = 15,
thickness = 15,
line = list(
color = "black",
width = 0.5
)
),
link = list(
source = count.ass_org.srtd$source,
target = count.ass_org.srtd$target,
value =  count.ass_org.srtd$freq
# color =  json_data$data[[1]]$link$color,
# label =  json_data$data[[1]]$link$label
)
) %>%
layout(
title = "Top Government Interest Organizations to Assignees, 1980 - 2017",
font = list(
size = 10
),
xaxis = list(showgrid = F, zeroline = F, showticklabels = F),
yaxis = list(showgrid = F, zeroline = F, showticklabels = F)
)
patent_flow_plot
getwd()
orca(p.patent_flow, file = paste0("data_viz\\Sankey_", script_v, ".pdf"))
htmlwidgets::saveWidget(patent_flow_plot, file = paste0("data_viz\\Sankey org name_", script_v, "_", ".html"))
orca(patent_flow_plot, file = paste0("data_viz\\Sankey_", script_v, ".pdf"))
htmlwidgets::saveWidget(patent_flow_plot, file = paste0("data_viz\\Sankey org name_", script_v, "_", ".html"))
orca(patent_flow_plot, file = paste0("data_viz\\Sankey_", script_v, ".pdf"))
htmlwidgets::saveWidget(patent_flow_plot, file = paste0("data_viz\\Sankey org name_", script_v, "_", ".html"))
htmlwidgets::saveWidget(patent_flow_plot, file = paste0("data_viz\\Sankey org name_", script_v, "_", ".html"))
CairoPDF(file = paste0("data_viz\\Sankey_", script_v), width = 9, height = 7)
patent_flow_plot
dev.off()
orca(patent_flow_plot, file = paste0("data_viz\\Sankey_", script_v, ".pdf"))
library(Cairo)
CairoPDF(file = paste0("data_viz\\Sankey_", script_v), width = 9, height = 7)
patent_flow_plot
dev.off()
install.packages("processx")
library(processx)
orca(patent_flow_plot, file = paste0("data_viz\\Sankey_", script_v, ".pdf"))
orca(patent_flow_plot, file = paste0("data_viz\\Sankey_", script_v, ".pdf"))
orca(patent_flow_plot, file = paste0("data_viz\\Sankey_", script_v, ".pdf"))
MAPBOX_TOKEN = "pk.eyJ1IjoicGF0ZW5pc2giLCJhIjoiY2pvYWU5aGUxMGR1ejNrbzVvNHR4b2ZnciJ9._AGpzYSoU1wD-DOGnydpxw"
orca(patent_flow_plot, file = paste0("data_viz\\Sankey_", script_v, ".pdf"))
Sys.setenv('MAPBOX_TOKEN' = "pk.eyJ1IjoicGF0ZW5pc2giLCJhIjoiY2pvYWU5aGUxMGR1ejNrbzVvNHR4b2ZnciJ9._AGpzYSoU1wD-DOGnydpxw")
orca(patent_flow_plot, file = paste0("data_viz\\Sankey_", script_v, ".pdf"))
plotly::orca(patent_flow_plot, file = paste0("data_viz\\Sankey_", script_v, ".pdf"))
CairoPNG(file = "test", width = 9, height = 7)
patent_flow_plot
dev.off()
ggsave("test", plot = patent_flow_plot)
ggsave("test.png", plot = patent_flow_plot)
patent_flow_plot
setwd("G:/PatentsView/cssip/government-interest/2_Data_Viz_Generate")
source("requirements.R")
script_v <- "3.0"
source("G:/PatentsView/")
source("G:/PatentsView/config.R")
dbname = dbname_new
my_db=src_mysql(dbname=dbname_new,host=host,port=port,user=user,password=password)
in.patent_level <- as.data.frame(tbl(my_db, "temp_patent_level_gi_v3"))
in.gov_level <- as.data.frame(tbl(my_db, "temp_gi_level_gi_v3"))
in.all <- as.data.frame(tbl(my_db, "temp_patent_level_all_v3"))
in.assignees.all <- as.data.frame(tbl(my_db, "all_assignees"))
